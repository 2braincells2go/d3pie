<div class="page-header affix" style="padding-top: 18px; margin: 0px; width: 100%; background-color: white; z-index:2">
	<h1>Docs</h1>
</div>

<div class="row">
	<div class="col-lg-3 bs-docs-sidebar" id="pagenav">
		<ul class="nav nav-list bs-docs-sidenav affix" data-spy="affix" style="top: 170px">
			<li class="active"><a href="#docs-disclaimer"><i class="icon-chevron-right"></i> Disclaimer</a></li>
			<li><a href="#docs-intro"><i class="icon-chevron-right"></i> Intro</a></li>
			<li><a href="#docs-dependencies"><i class="icon-chevron-right"></i> Script Dependencies</a></li>
			<li><a href="#docs-api"><i class="icon-chevron-right"></i> The API</a></li>
			<li><a href="#docs-configuration"><i class="icon-chevron-right"></i> The Configuration Object</a></li>
			<li><a href="#docs-upgrading"><i class="icon-chevron-right"></i> Upgrading</a></li>
			<li><a href="#docs-feature-requests"><i class="icon-chevron-right"></i> Feature Requests!</a></li>
		</ul>
	</div>

	<div class="col-lg-9" style="margin-top: 124px; z-index: 1">

		<section id="docs-disclaimer" class="greyBox">
			<h3>Disclaimer</h3>

			<p>
				At some point when I was designing this thing, it dawned on me that creating a re-usable pie chart was
				tantamount to building an entire rendering engine. If I made it as customizable as I wanted it to be,
				it would open the door to letting people generate really ugly, unreadable pie charts. On the other
				hand, if I limited the available functionality it wouldn't be as useful for many people. <i>Rats</i>.
			</p>

			<p>
				So the following morning, after sobering up, I decided on an approach: I wouldn't limit the functionality,
				but do my best to fix the likely problems. Some things are automatically resolved: placement of elements
				(conflict resolution for outer labels, rough-guess for default pie size if nothing is specified, basic
				position rendering logic). I'd provide a number of user-defined options that anticipate the sort
				of problems that are likely to occur, such as truncating long labels, hiding labels for small data
				values. These sort of options should go a long way to help you construct clear, readable charts. But
				it's far from infallible! Over time, I hope to make the rendering code smarter but ultimately the
				responsibility will always lie with you to <i>know thy data</i> and choose appropriate configuration
				settings.
			</p>

			<p>
				Okay, disclaimer over. :)
			</p>
		</section>

		<section id="docs-intro">
			<h3>Intro</h3>

			<p>
				This page documents everything you need to know about d3pie: the available configuration settings,
				what API functions are available, and so on. If you think there's something missing,
				<a href="https://github.com/benkeen/d3pie/issues" target="_blank">open a ticket on github</a> and
				I'll see to it. Better yet, <a href="https://github.com/benkeen/d3pie/">fork the project</a> and
				update the documentation yourself!
			</p>

			<p>
				If you're looking for a quick <i>how-on-earth-do-I-get-this-working-on-my-site</i>, check out the
				<a href="#howToUse" class="selectPage">How to Use</a> page.
			</p>
		</section>

		<section id="docs-dependencies">
			<h3>Script Dependencies</h3>
			<ul>
				<li><a href="https://github.com/mbostock/d3/releases" target="_blank" class="openInNewWindow">d3.js</a> - version 3.4 or later.</li>
				<li><a href="http://jquery.com/" target="_blank" class="openInNewWindow">jQuery</a> - version 1.10 or later.</li>
			</ul>

			<p>
				To be honest, d3pie will probably work just fine with earlier versions of both of those scripts - certainly
				jQuery -, but I won't guarantee it. d3pie will always rely on d3, but over time I plan to remove the need for jQuery.
			</p>
		</section>

		<section id="docs-api">
			<h3>The API</h3>
			<p>
				There are a few API functions available on your d3pie object. These are accessible like so:
			</p>

			<pre class="prettyprint language-js">var myPie = new d3pie("element", { ... });
var openSegment = myPie.getOpenSegment();
myPie.redraw();
// ...</pre>

			<table class="table table-striped table-hover ">
				<thead>
				<tr>
					<th>Function</th>
					<th>Params</th>
					<th>Description</th>
				</tr>
				</thead>
				<tbody>
				<tr>
					<td>d3pie( ... )</td>
					<td>
						element <span class="label label-success">mixed</span>,
						config <span class="label label-danger">object</span>
					</td>
					<td>
						The d3pie constructor. This takes two params. The first parameter is the element that is being
						targeted for the pie chart: it can either be a string of the ID or the actual DOM element.<br />
						The second parameter is the d3pie configuration object. See the <a href="#docs-configuration">section
						below</a> for more information on that.
					</td>
				</tr>
				<tr>
					<td>d3pie.redraw()</td>
					<td>&#8212;</td>
					<td>
						This redraws the entire pie chart. If the pie chart is initially created in a hidden element
						in your webpage, you will need to run this function when the pie chart is first made visible.
						The reason is that d3pie needs to actually "see" the dimensions of the label elements placed on
						the canvas in order to compute the correct placement of each element - and it can't do this unless
						the canvas is visible.
					</td>
				</tr>
				<tr>
					<td>d3pie.openSegment()</td>
					<td>index <span class="label label-primary">number</span></td>
					<td>
						Calling this function does the same action as clicking a pie segment. You just pass in the index
						of the segment you wish to open. If an existing segment is opened, d3pie will automatically close
						it as it opens the new one.

						TODO - closeSegment / toggleSegment
					</td>
				</tr>
				<tr>
					<td>d3pie.getOpenSegment()</td>
					<td>&#8212;</td>
					<td>
						Returns an object containing all pertinent info about the open segment. If nothing is open,
						it returns <code>null</code>.
					</td>
				</tr>
				<tr>
					<td>d3pie.updateProp()</td>
					<td>
						propKey <span class="label label-warning">string</span>,
						value <span class="label label-success">mixed</span>
					</td>
					<td>

					</td>
				</tr>
				<tr>
					<td>d3pie.destroy()</td>
					<td>&#8212;</td>
					<td>

					</td>
				</tr>
				</tbody>
			</table>

			<p>
				In addition to the above functions, see the <b>callbacks</b> section of the configuration object
				to tie in your own code with events such as
			</p>
		</section>

		<section id="docs-configuration">
			<h3>The Configuration Object</h3>
			<p>

			</p>
		</section>


		<section id="docs-upgrading">
			<h3>Upgrading</h3>
			<p>
				<b>I make no promises that future versions won't change the appearance of your pie charts.</b> I'll keep the
				d3pie JSON config object consistent for as long as I can, but I <i>do</i> anticipate changes to the exact
				appearance of the generate pie chart. So upgrade carefully.
			</p>
		</section>

		<section id="docs-feature-requests">
			<h3>Feature Requests</h3>
			<p>

			</p>
		</section>

	</div>
</div>