<div class="page-header affix" style="padding-top: 18px; margin: 0px; width: 100%; background-color: white; z-index:2">
	<h1>Docs</h1>
</div>

<div class="row">
	<div class="col-lg-2 bs-docs-sidebar" id="pagenav">
		<ul class="nav nav-list bs-docs-sidenav affix" data-spy="affix" style="top: 170px">
			<li class="active"><a href="#docs-disclaimer"><i class="icon-chevron-right"></i> Disclaimer</a></li>
			<li><a href="#docs-intro"><i class="icon-chevron-right"></i> Intro</a></li>
			<li><a href="#docs-dependencies"><i class="icon-chevron-right"></i> Script Dependencies</a></li>
			<li><a href="#docs-config"><i class="icon-chevron-right"></i> Configuration</a></li>
			<li><a href="#docs-api"><i class="icon-chevron-right"></i> The API</a></li>
			<li><a href="#docs-upgrading"><i class="icon-chevron-right"></i> Upgrading</a></li>
		</ul>
	</div>

	<div class="col-lg-10" style="margin-top: 124px; z-index: 1">

		<section id="docs-disclaimer" class="greyBox">
			<h3>Disclaimer</h3>

			<p>
				At some point when I was designing this thing, it dawned on me that creating a re-usable pie chart was
				tantamount to building an entire rendering engine. If I made it as customizable as I wanted it to be,
				it would open the door to letting people generate really ugly, unreadable pie charts. On the other
				hand, if I limited the available functionality it wouldn't be as useful for many people. <i>Rats</i>.
			</p>

			<p>
				So the following morning, after sobering up, I decided on an approach: I wouldn't limit the functionality,
				but do my best to mitigate disaster. First, I'd include some automatic logic for the placement of elements
				(conflict resolution for labels, rough-guess for default pie size if nothing is specified, basic
				position rendering logic). Secondly, I'd provide a number of user-defined options that anticipate the sort
				of problems that are likely to occur, such as truncating long labels, hiding labels for small data
				values. These sort of options should go a long way to help you construct clear, readable charts. But
				it's far from infallible! When you're tinkering around in the <a href="">generator</a> you may well
				find that the label positioning occasionally gets all wacky, or that inner labels overlap. I know! Over
				time, I hope to make the rendering code smarter but ultimately the responsibility will always lie with
				you to <i>know thy data</i> and choose appropriate configuration settings.
			</p>

			<p>
				Okay, disclaimer over. :)
			</p>
		</section>

		<section id="docs-intro">
			<h3>Intro</h3>

			<p>
				This page documents everything you need to know about d3pie: the available configuration settings,
				what API functions are available, and so on. If you think there's something missing,
				<a href="https://github.com/benkeen/d3pie/issues" target="_blank">open a ticket on github</a> and
				I'll see to it.
			</p>

			<p>
				If you're looking for a quick <i>how-on-earth-do-I-get-this-working-on-my-site</i>, check out the
				<a href="#howToUse">How to Use</a> page.
			</p>

		</section>

		<section id="docs-dependencies">
			<h3>Script Dependencies</h3>
			<p>
				Right now the script depends on both <a href="">d3.js</a> and <a href="">jQuery</a>. It will always use
				d3, but over time I hope to remove the need for jQuery.
			</p>
		</section>

		<section id="docs-configuration">
			<h3>Configuration</h3>
			<p>

			</p>
		</section>

		<section id="docs-api">
			<h3>The API</h3>
			<p>
				There are a few API functions available on your d3pie object. These are accessible like so:
			</p>

			<blockquote>var myPie = new d3pie("element", { ... });<br />
var openSegment = myPie.getOpenSegment();<br />
myPie.redraw();
// ...</blockquote>

			<table class="table table-striped table-hover ">
				<thead>
				<tr>
					<th>Function</th>
					<th>Params</th>
					<th>Description</th>
				</tr>
				</thead>
				<tbody>
				<tr>
					<td>d3pie.redraw()</td>
					<td>&#8212;</td>
					<td>
						This redraws the entire pie chart. If the pie chart is initially created in a hidden element
						in your webpage, you will need to run this function when the pie chart is first made visible.
						The reason is that d3pie needs to actually "see" the dimensions of the label elements placed on
						the canvas in order to compute the correct placement of each element - and it can't do this unless
						the canvas is visible.
					</td>
				</tr>
				<tr>
					<td>d3pie.openSegment()</td>
					<td>index <span class="label label-primary">number</span></td>
					<td>

					</td>
				</tr>
				<tr>
					<td>d3pie.getOpenSegment()</td>
					<td>&#8212;</td>
					<td>

					</td>
				</tr>
				<tr>
					<td>d3pie.updateProp()</td>
					<td>
						propKey <span class="label label-warning">string</span>,
						value <span class="label label-success">mixed</span></td>
					<td>

					</td>
				</tr>
				<tr>
					<td>d3pie.destroy()</td>
					<td>&#8212;</td>
					<td>

					</td>
				</tr>
				</tbody>
			</table>

		</section>

		<section id="docs-upgrading">
			<h3>Upgrading</h3>
			<p>
				<b>I make no promises that future versions won't change the appearance of your pie charts.</b> I'll keep the
				d3pie JSON config object consistent for as long as I can, but I <i>do</i> anticipate changes to the exact
				appearance of the generate pie chart. So upgrade carefully.
			</p>
		</section>

	</div>
</div>